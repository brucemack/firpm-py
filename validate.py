import math
import firpm 

def is_close(a, b):
    return abs(a - b) < 0.00000001

def test(a, b):
    for i in range(0, len(a)):
        assert is_close(a[i], b[i])


# Actual test cases taken from the original paper by Parks/McClellan/Rabiner
# "A Computer Program for Designing Optimum FIR Linear Phase Digital Filters"
# IEEE Transactions on Audio and Electroacoustics, December 1973

# Page 515, Figure 7 - N=24 low-pass filter
h, dev = firpm.design(24, 1, 2, [ 0.00, 0.08, 0.16, 0.5 ], [ 1.0, 0.0 ], [ 1.0, 1.0 ])

expected_h = [ 
               0.0033740914579617524, 
               0.014938297792277922, 
               0.010569358116249743, 
               0.00254150654526731, 
               -0.01592999263167659, 
               -0.03408534201730703, 
               -0.03811217458069606, 
               -0.014629168023383229, 
               0.04008954153733547, 
               0.11540712726816663, 
               0.1885075162200366, 
               0.23354605770111203,
               0.23354605770111203, 
               0.1885075162200366, 
               0.11540712726816663, 
               0.04008954153733547, 
               -0.014629168023383229, 
               -0.03811217458069606, 
               -0.03408534201730703, 
               -0.01592999263167659, 
               0.00254150654526731, 
               0.010569358116249743, 
               0.014938297792277922, 
               0.0033740914579617524 
    ]

test(h, expected_h)

# Page 516, Figure 11 - N=50 bandpass filter with unequal weighting in the stopbands
h, dev = firpm.design(50, 1, 3, [ 0.00, 0.15, 0.20, 0.30, 0.35, 0.5 ], 
            [ 0.0, 1.0, 0.0 ], [ 10.0, 1.0, 100.0 ])

expected_h = [ 
    0.0015648411585066305, 
    0.003081629829504497, 
    -0.003174525543306419, 
    -0.006198003230722065, 
    0.007435068083650533, 
    0.009836896377218823, 
    -0.011103733765198551, 
    -0.010101927188888561, 
    0.008994918846895036, 
    0.002898019096592981, 
    0.0026633002812719506, 
    0.012021957880554233, 
    -0.020657140913071498, 
    -0.02718900651610188, 
    0.03233712607523547, 
    0.028305611720573262, 
    -0.020922035925132993, 
    -0.0018761132107492449, 
    -0.022823360129893014, 
    -0.053926218730889944, 
    0.0904725384265733, 
    0.12315772033277218, 
    -0.15639220519285912, 
    -0.1773344758191503, 
    0.1907816423948988, 
    # Middle
    0.1907816423948988, 
    -0.1773344758191503, 
    -0.15639220519285912, 
    0.12315772033277218, 
    0.0904725384265733, 
    -0.053926218730889944, 
    -0.022823360129893014, 
    -0.0018761132107492449, 
    -0.020922035925132993, 
    0.028305611720573262, 
    0.03233712607523547, 
    -0.02718900651610188, 
    -0.020657140913071498, 
    0.012021957880554233,   
    0.0026633002812719506, 
    0.002898019096592981, 
    0.008994918846895036, 
    -0.010101927188888561, 
    -0.011103733765198551, 
    0.009836896377218823, 
    0.007435068083650533, 
    -0.006198003230722065, 
    -0.003174525543306419, 
    0.003081629829504497, 
    0.0015648411585066305
]

test(h, expected_h)

# Page 517, Figure 13 - N=31 bandstop filter
h, dev = firpm.design(31, 1, 3, [ 0.00, 0.1, 0.15, 0.35, 0.42, 0.5 ], 
            [ 1.0, 0.0, 1.0 ], [ 1.0, 50.0, 1.0 ])

expected_h = [ 
    -0.0043725797451425515, 
    0.01929593347014174, 
    -0.005698289473012531, 
    0.05236028082699784, 
    0.0031550243541299, 
    0.043481228022600286, 
    0.011696224548274226, 
    -0.03791541679712677, 
    0.0034844160929820333, 
    -0.08759902839970671, 
    -0.01099306028470432, 
    0.044455164461999624, 
    -0.006934716657523536, 
    0.3114482451571694, 
    0.009662981164997617, 
    0.45296733656333893, 
    0.009662981164997617, 
    0.3114482451571694, 
    -0.006934716657523536, 
    0.044455164461999624, 
    -0.01099306028470432, 
    -0.08759902839970671, 
    0.0034844160929820333, 
    -0.03791541679712677, 
    0.011696224548274226, 
    0.043481228022600286, 
    0.0031550243541299, 
    0.05236028082699784, 
    -0.005698289473012531, 
    0.01929593347014174, 
    -0.0043725797451425515    
]
test(h, expected_h)

# Page 519, Figure 17 - N=32 Differentiation
# Alternating signs, odd-symmetric
h, dev = firpm.design(32, 2, 1, [ 0.0, 0.5 ], [ 1.0 ], [ 1.0 ])
expected_h = [
    -0.0006271306921096706, 
    0.0008563341056169156, 
    -0.00042418557439164166, 
    0.0003990153346719782, 
    -0.0004343728190480481, 
    0.0004996948261121011, 
    -0.0005963499296119891, 
    0.0007327705298814281, 
    -0.0009300270137551502, 
    0.0012270039362681918, 
    -0.0017012817603737048, 
    0.00252723421463497, 
    -0.004160115853625142, 
    0.008129455317899582, 
    -0.02253909705813611,
    # Center 
    0.20266535417976278, 
    -0.20266535417976278, 
    # Center 
    0.02253909705813611, 
    -0.008129455317899582, 
    0.004160115853625142, 
    -0.00252723421463497, 
    0.0017012817603737048, 
    -0.0012270039362681918, 
    0.0009300270137551502, 
    -0.0007327705298814281, 
    0.0005963499296119891, 
    -0.0004996948261121011, 
    0.0004343728190480481, 
    -0.0003990153346719782, 
    0.00042418557439164166, 
    -0.0008563341056169156, 
    0.0006271306921096706
]
test(h, expected_h)

# Page 520, Figure 19 - N=20 Hilbert transformer
# Notice the response is odd-symmetric
h, dev = firpm.design(20, 3, 1, [ 0.05, 0.5 ], [ 1.0 ], [ 1.0 ])
expected_h = [
    0.016026197391377024, 
    0.014173285757471312, 
    0.020452438545522242, 
    0.028736887482983087, 
    0.03985258209689886, 
    0.05533329900907398, 
    0.0785427562947919, 
    0.11823755648160006, 
    0.20664125464275596, 
    # Center
    0.6347561803482324, 
    -0.6347561803482324, 
    # Center
    -0.20664125464275596, 
    -0.11823755648160006, 
    -0.0785427562947919, 
    -0.05533329900907398, 
    -0.03985258209689886, 
    -0.028736887482983087, 
    -0.020452438545522242, 
    -0.014173285757471312, 
    -0.016026197391377024  
]
test(h, expected_h)
